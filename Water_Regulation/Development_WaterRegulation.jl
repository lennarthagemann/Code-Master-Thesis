try
    using Revise
catch e
    @warn "Error initializing Revise" exception=(e, catch_backtrace())
end
includet("C:/Users/lenna/OneDrive - NTNU/Code Master Thesis/Water_Regulation/WaterRegulation.jl")
using .WaterRegulation
using Distributions

filepath_system = "C://Users/lenna/OneDrive - NTNU/Code Master Thesis/Water_Regulation/ReservoirSystem.json"
filepath_nomination = "C://Users/lenna/OneDrive - NTNU/Code Master Thesis/Water_Regulation/Nomination.json"


res, plants, parts = read_data(filepath_system)
Qnom = read_nomination(filepath_nomination, parts, res)
print(Qnom)

function calculate_produced_power(Qadj::Dict{Reservoir, Float64}, parts::Array{Participant})::Dict{Participant, Float64}
    return Dict{Participant, Float64}(p => sum([min(Qadj[k.reservoir], k.spill_reference_level) * k.equivalent for k in p.plants]) for p in parts)
end

"""
Calculate the total amount of power generated by every participant after adjustment and power swap (as well as reduction)
The total amount of power is equivalent to the sum of power generated at every haydropowerplant and the power swap at that dischargepoint
"""
function total_power(Qadj::Dict{Reservoir, Float64}, P_Swap::Dict{Participant, Dict{Reservoir, Float64}}, parts::Array{Participant})::Dict{Participant, Float64}
    Produced_Power = calculate_produced_power(Qadj, parts)
    return Dict{Participant, Float64}(p => Produced_Power[p] + sum(values(P_Swap[p])) for p in parts)
end

function total_revenue(total_power::Dict{Participant, Float64}, price::Array{Float64})::Dict{Participant, Float64}
    return Dict{Participant, Float64}(p => sum(total_power[p] * price) for p in keys(total_power))
end

"""
Calculates overnomination of every producer at every power plant: Used for power swap reduction.
"""

# testing zone
Qref = Dict{Reservoir, Float64}(r => 150 for r in res)
Qmax = CalculateQmax(Qnom)
Qadj_All = adjust_flow!(Qnom, Qmax)
POver, ΣPOver = Calculate_POver(Qnom, Qmax, parts, plants)
MaxEnergy = Calculate_Ersmax(plants, Qadj_All)
P_Swap = power_swap(Qnom, Qadj_All, POver, ΣPOver, MaxEnergy, parts)
ppower = calculate_produced_power(Qadj_All, parts)
tpower = total_power(Qadj_All, P_Swap, parts)
print(sum(collect(values(ppower))), "\n", sum(collect(values(tpower))))

price = rand(Uniform(0.1,0.2), 24)
print(total_revenue(tpower, price))

water_regulation(Qnom, Qref)